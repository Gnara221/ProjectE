#ifndef __NRF24L01_H__
#define __NRF24L01_H__

//NRF24L01寄存器操作命令
#define SPI_READ_REG        0x00  //读配置寄存器,低5位为寄存器地址
#define SPI_WRITE_REG       0x20  //写配置寄存器,低5位为寄存器地址
#define RD_RX_PLOAD     0x61  //读RX有效数据,1~32字节
#define WR_TX_PLOAD     0xA0  //写TX有效数据,1~32字节
#define FLUSH_TX        0xE1  //清除TX FIFO寄存器.发射模式下用
#define FLUSH_RX        0xE2  //清除RX FIFO寄存器.接收模式下用
#define REUSE_TX_PL     0xE3  //重新使用上一包数据,CE为高,数据包被不断发送.
#define NOP             0xFF  //空操作,可以用来读状态寄存器	 
//SPI(NRF24L01)寄存器地址
#define CONFIG          0x00  //配置寄存器地址;bit0:1接收模式,0发射模式;bit1:电选择;bit2:CRC模式;bit3:CRC使能;
                              //bit4:中断MAX_RT(达到最大重发次数中断)使能;bit5:中断TX_DS使能;bit6:中断RX_DR使能
#define EN_AA           0x01  //使能自动应答功能  bit0~5,对应通道0~5
#define EN_RXADDR       0x02  //接收地址允许,bit0~5,对应通道0~5
#define SETUP_AW        0x03  //设置地址宽度(所有数据通道):bit1,0:00,3字节;01,4字节;02,5字节;
#define SETUP_RETR      0x04  //建立自动重发;bit3:0,自动重发计数器;bit7:4,自动重发延时 250*x+86us
#define RF_CH           0x05  //RF通道,bit6:0,工作通道频率;
#define RF_SETUP        0x06  //RF寄存器;bit3:传输速率(0:1Mbps,1:2Mbps);bit2:1,发射功率;bit0:低噪声放大器增益
#define STATUS          0x07  //状态寄存器;bit0:TX FIFO满标志;bit3:1,接收数据通道号(最大:6);bit4,达到最多次重发
                              //bit5:数据发送完成中断;bit6:接收数据中断;
#define MAX_TX  	0x10  //达到最大发送次数中断
#define TX_OK   	0x20  //TX发送完成中断
#define RX_OK   	0x40  //接收到数据中断
//24L01发送接收数据宽度定义
#define TX_ADR_WIDTH    5   //5字节的地址宽度
#define RX_ADR_WIDTH    5   //5字节的地址宽度
#define TX_PLOAD_WIDTH  32  //20字节的用户数据宽度
#define RX_PLOAD_WIDTH  32  //20字节的用户数据宽度



#define CONFIG 0x00					// 'Config' register address
#define EN_AA 0x01					// 'Enable Auto Acknowledgment' register address
#define EN_RXADDR 0x02				// 'Enabled RX addresses' register address
#define SETUP_AW 0x03				// 'Setup address width' register address
#define SETUP_RETR 0x04 			// 'Setup Auto. Retrans' register address#define RF_CH Ox05// 'RF channel' register address
#define RF_SETUP 0x06				// 'RF setup' register address
#define STATUS 0x07 				// 'Status' register address
#define OBSERVE_TX 0x08				// 'Observe TX' register address
#define CD 0x09						// 'Carrier Detect' register address
#define RX_ADDR_P0 0x0A				// 'RX address pipe0' register address
#define RX_ADDR_P1 0x0B				// 'RX address pipe1' register address
#define RX_ADDR_P2 0x0C				// 'RX address pipe2' register address
#define RX_ADDR_P3 0x0D				//'RX address pipe3' register address
#define RX_ADDR_P4 0x0E				// 'RX address pipe4' register address
#define RX_ADDR_P5 0x0F				//'RX address pipe5' register address
#define TX_ADDR 0x10				// 'TX address' register address
#define RX_PW_P0 0x11				// 'RX payload width, pipe0' register address
#define RX_PW_P1 0x12				// 'RX payload width, pipel' register address
#define RX_PW_P2 0x13				// 'RX payload width, pipe2' register address
#define RX_PW_P3 0x14				// 'RX payload width, pipe3' register address
#define RX_PW_P4 0x15				// 'RX payload width, pipe4' register address
#define RX_PW_P5 0x16				// 'RX payload width, pipe5' register address
#define FIFO_STATUS 0x17			// 'FIFO Status Register' register address

void NRF24L01_Init(void);
u8 NRF24L01_Check(void);
u8 NRF24L01_Read_Buf(u8 reg,u8 *pBuf,u8 len);
u8 NRF24L01_Write_Buf(u8 reg, u8 *pBuf, u8 len);
u8 NRF24L01_Write_Reg(u8 reg,u8 value);
u8 NRF24L01_Read_Reg(u8 reg);
u8 NRF24L01_TxPacket(u8 *txbuf);
u8 NRF24L01_RxPacket(u8 *rxbuf);
void SPI_RX_Mode(void);
void SPI_TX_Mode(void);
#endif
